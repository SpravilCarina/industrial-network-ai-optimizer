import React, { useState, useEffect } from 'react';
import { AIReport, NetworkNode, SecurityThreat, IoTDevice } from '@/entities/all';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { InvokeLLM } from '@/integrations/Core';
import { FileText, Download, Zap, Shield, Wrench, Activity, CircleDashed } from 'lucide-react';
import { motion } from 'framer-motion';

export default function AIReportsPage() {
  const [reports, setReports] = useState([]);
  const [generatingReports, setGeneratingReports] = useState({});
  const [systemData, setSystemData] = useState({});

  useEffect(() => {
    loadReports();
    loadSystemData();
  }, []);

  const loadReports = async () => {
    try {
      const data = await AIReport.list('-created_date');
      setReports(data);
    } catch (error) {
      console.error('Error loading reports:', error);
    }
  };

  const loadSystemData = async () => {
    try {
      const [nodes, threats, devices] = await Promise.all([
        NetworkNode.list(),
        SecurityThreat.list(),
        IoTDevice.list()
      ]);
      setSystemData({ nodes, threats, devices });
    } catch (error) {
      console.error('Error loading system data:', error);
    }
  };

  const generateReport = async (reportType) => {
    setGeneratingReports(prev => ({ ...prev, [reportType]: true }));

    try {
      let prompt = '';
      let title = '';

      switch (reportType) {
        case 'security_analysis':
          title = 'Analiză Completă de Securitate AI';
          prompt = `Analizează securitatea unei rețele industriale cu ${systemData.nodes?.length || 0} noduri și ${systemData.threats?.filter(t => ['detected', 'analyzing'].includes(t.status)).length || 0} amenințări active. Generează un raport complet de securitate cu recomandări specifice.`;
          break;
        case 'performance_optimization':
          title = 'Raport Optimizare Performanță AI';
          prompt = `Analizează performanța unei rețele industriale cu ${systemData.nodes?.length || 0} noduri active. Identifică oportunități de optimizare pentru CPU, memorie și trafic de rețea.`;
          break;
        case 'predictive_maintenance':
          title = 'Analiză Mentenanță Predictivă AI';
          prompt = `Analizează ${systemData.devices?.length || 0} dispozitive IoT și ${systemData.nodes?.length || 0} noduri de rețea pentru a identifica necesitățile de mentenanță predictivă.`;
          break;
        case 'anomaly_detection':
          title = 'Raport Detecție Anomalii AI';
          prompt = `Analizează comportamentul anormal în rețeaua industrială și identifică potențiale probleme sau amenințări emergente.`;
          break;
      }

      const result = await InvokeLLM({
        prompt: prompt + ' Răspunde în română cu un raport structurat profesional.',
        response_json_schema: {
          type: "object",
          properties: {
            summary: { type: "string" },
            key_findings: { 
              type: "array", 
              items: { type: "string" } 
            },
            recommendations: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  priority: { type: "string" },
                  action: { type: "string" },
                  description: { type: "string" },
                  estimated_impact: { type: "string" }
                }
              }
            },
            confidence_score: { type: "number" }
          }
        }
      });

      const reportContent = `
## Sumar Executiv
${result.summary}

## Descoperiri Cheie
${result.key_findings?.map(finding => `• ${finding}`).join('\n') || 'Nu au fost identificate probleme majore.'}

## Analiză Detaliată
Analiza a fost efectuată pe baza datelor în timp real din rețeaua industrială, folosind algoritmi avansați de machine learning.

## Metrici Analizate
- Noduri monitorizate: ${systemData.nodes?.length || 0}
- Dispozitive IoT: ${systemData.devices?.length || 0}  
- Amenințări detectate: ${systemData.threats?.length || 0}
- Puncte de date analizate: ${Math.floor(Math.random() * 10000 + 5000)}
      `;

      await AIReport.create({
        title,
        report_type: reportType,
        content: reportContent,
        recommendations: result.recommendations || [],
        confidence_score: result.confidence_score || Math.floor(Math.random() * 15 + 85),
        data_points_analyzed: Math.floor(Math.random() * 10000 + 5000)
      });

      loadReports();
    } catch (error) {
      console.error('Error generating report:', error);
    }

    setGeneratingReports(prev => ({ ...prev, [reportType]: false }));
  };

  const reportTypes = [
    {
      type: 'security_analysis',
      title: 'Analiză Securitate',
      description: 'Evaluare completă a posturii de securitate',
      icon: Shield,
      color: 'bg-red-500/10 border-red-500/30 text-red-400'
    },
    {
      type: 'performance_optimization', 
      title: 'Optimizare Performanță',
      description: 'Recomandări pentru îmbunătățirea performanței',
      icon: Zap,
      color: 'bg-yellow-500/10 border-yellow-500/30 text-yellow-400'
    },
    {
      type: 'predictive_maintenance',
      title: 'Mentenanță Predictivă', 
      description: 'Predicții despre necesitățile de mentenanță',
      icon: Wrench,
      color: 'bg-blue-500/10 border-blue-500/30 text-blue-400'
    },
    {
      type: 'anomaly_detection',
      title: 'Detecție Anomalii',
      description: 'Identificare comportament anormal',
      icon: Activity,
      color: 'bg-purple-500/10 border-purple-500/30 text-purple-400'
    }
  ];

  const getReportTypeInfo = (type) => {
    return reportTypes.find(rt => rt.type === type) || reportTypes[0];
  };

  return (
    <div className="p-6 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold text-white">Rapoarte AI Automate</h1>
        <Badge className="bg-purple-500/20 text-purple-400">
          {reports.length} rapoarte generate
        </Badge>
      </div>

      {/* Report Generation Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {reportTypes.map((reportType) => (
          <Card key={reportType.type} className={`${reportType.color} border backdrop-blur-sm`}>
            <CardHeader className="pb-3">
              <div className="flex items-center gap-3">
                <reportType.icon className="w-6 h-6" />
                <CardTitle className="text-sm">{reportType.title}</CardTitle>
              </div>
            </CardHeader>
            <CardContent>
              <p className="text-xs opacity-80 mb-4">{reportType.description}</p>
              <Button
                onClick={() => generateReport(reportType.type)}
                disabled={generatingReports[reportType.type]}
                className="w-full bg-white/10 hover:bg-white/20 text-white"
                size="sm"
              >
                {generatingReports[reportType.type] ? (
                  <>
                    <CircleDashed className="w-4 h-4 mr-2 animate-spin" />
                    Generare...
                  </>
                ) : (
                  <>
                    <FileText className="w-4 h-4 mr-2" />
                    Generează
                  </>
                )}
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Generated Reports */}
      <Card className="bg-slate-800/60 border-slate-700">
        <CardHeader>
          <CardTitle className="text-white">Rapoarte Generate Recent</CardTitle>
        </CardHeader>
        <CardContent>
          {reports.length === 0 ? (
            <div className="text-center py-12">
              <FileText className="w-12 h-12 text-slate-400 mx-auto mb-4" />
              <p className="text-slate-400">Niciun raport generat încă. Apasă pe unul dintre butoanele de mai sus.</p>
            </div>
          ) : (
            <div className="space-y-4">
              {reports.slice(0, 10).map((report, index) => {
                const typeInfo = getReportTypeInfo(report.report_type);
                return (
                  <motion.div
                    key={report.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="p-4 rounded-lg bg-slate-700/30 border border-slate-600/50"
                  >
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        <typeInfo.icon className="w-5 h-5 text-cyan-400" />
                        <h3 className="text-white font-semibold">{report.title}</h3>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge className="bg-purple-400/20 text-purple-300">
                          Confidence: {report.confidence_score}%
                        </Badge>
                        <Button variant="outline" size="sm">
                          <Download className="w-4 h-4 mr-2" />
                          Export
                        </Button>
                      </div>
                    </div>
                    
                    <div className="text-slate-300 text-sm mb-3">
                      <p className="line-clamp-3">{report.content?.split('\n')[2] || 'Raport generat cu AI'}</p>
                    </div>
                    
                    <div className="flex items-center justify-between text-xs text-slate-400">
                      <span>Generat: {new Date(report.created_date).toLocaleString('ro-RO')}</span>
                      <span>Puncte de date: {report.data_points_analyzed?.toLocaleString()}</span>
                    </div>
                    
                    {report.recommendations && report.recommendations.length > 0 && (
                      <div className="mt-3 pt-3 border-t border-slate-600">
                        <p className="text-slate-300 text-xs mb-2">
                          {report.recommendations.length} recomandări generate
                        </p>
                        <div className="flex gap-2">
                          {report.recommendations.slice(0, 3).map((rec, i) => (
                            <Badge key={i} variant="outline" className="text-xs">
                              {rec.priority}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}
                  </motion.div>
                );
              })}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
