import React, { useState, useEffect } from 'react';
import { SecurityThreat, NetworkNode } from '@/entities/all';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { AlertTriangle, WifiOff, CheckCircle } from 'lucide-react';

const getSeverityBadge = (severity) => ({
  critical: "bg-red-500/20 text-red-500 border-red-500/30",
  high: "bg-orange-400/20 text-orange-400 border-orange-400/30",
  warning: "bg-yellow-400/20 text-yellow-400 border-yellow-400/30",
  medium: "bg-yellow-400/20 text-yellow-400 border-yellow-400/30",
  low: "bg-blue-400/20 text-blue-400 border-blue-400/30",
});

export default function AlertsPage() {
  const [alerts, setAlerts] = useState([]);

  useEffect(() => {
    const fetchAlerts = async () => {
      const threats = await SecurityThreat.list();
      const nodes = await NetworkNode.list();
      
      const threatAlerts = threats
        .filter(t => ['detected', 'analyzing'].includes(t.status))
        .map(t => ({
          id: `t-${t.id}`,
          type: 'Securitate',
          severity: t.severity,
          message: t.description,
          source: t.source_ip || 'N/A',
          target: t.target_node,
          timestamp: t.created_date,
          icon: AlertTriangle
        }));
      
      const nodeAlerts = nodes
        .filter(n => ['offline', 'warning', 'critical'].includes(n.status))
        .map(n => ({
          id: `n-${n.id}`,
          type: 'Infrastructură',
          severity: n.status === 'offline' ? 'high' : n.status,
          message: `Nodul ${n.name} este în starea ${n.status}`,
          source: n.ip_address,
          target: n.name,
          timestamp: n.updated_date,
          icon: WifiOff
        }));

      setAlerts([...threatAlerts, ...nodeAlerts].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)));
    };
    fetchAlerts();
  }, []);

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-3xl font-bold text-white">Alertări Active Sistem</h1>
      <Card className="bg-slate-800/60 border-slate-700">
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow className="border-slate-700 hover:bg-transparent">
                <TableHead className="text-slate-300">Severitate</TableHead>
                <TableHead className="text-slate-300">Tip</TableHead>
                <TableHead className="text-slate-300">Mesaj</TableHead>
                <TableHead className="text-slate-300">Sursă / Țintă</TableHead>
                <TableHead className="text-slate-300">Timp</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {alerts.length > 0 ? alerts.map(alert => {
                const Icon = alert.icon;
                return (
                  <TableRow key={alert.id} className="border-slate-700 hover:bg-slate-700/50">
                    <TableCell><Badge className={getSeverityBadge(alert.severity)[alert.severity]}>{alert.severity}</Badge></TableCell>
                    <TableCell><span className="text-slate-300 flex items-center gap-2"><Icon className="w-4 h-4" />{alert.type}</span></TableCell>
                    <TableCell className="text-white">{alert.message}</TableCell>
                    <TableCell className="text-slate-400">{alert.target}</TableCell>
                    <TableCell className="text-slate-400">{new Date(alert.timestamp).toLocaleString()}</TableCell>
                  </TableRow>
                )
              }) : (
                <TableRow className="border-slate-700 hover:bg-transparent">
                  <TableCell colSpan={5} className="text-center py-10">
                    <CheckCircle className="mx-auto w-10 h-10 text-green-400 mb-2"/>
                    <p className="text-green-400">Nicio alertă activă. Sistemul funcționează normal.</p>
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
